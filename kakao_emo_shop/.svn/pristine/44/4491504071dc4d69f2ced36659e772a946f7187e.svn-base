package com.itwill.member;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import javax.naming.InitialContext;
import javax.sql.DataSource;

public class MemberDao {
	private DataSource dataSource;
	
	public MemberDao() throws Exception {
		InitialContext ic = new InitialContext();
		dataSource = (DataSource)ic.lookup("java:/comp/env/jdbc/OracleDB");
		
	}
	
	public int create(Member member) throws Exception{
		Connection con = null;
		PreparedStatement pstmt = null;
		String Sql = "insert into MEMBER(M_NO,M_NINAME,M_ID,M_PASS,MD_NO)"+ 
				"values(m_No.nextval,?,?,?,md_No.nextval)";
		try {
			con = dataSource.getConnection();
			pstmt = con.prepareStatement(Sql);
			pstmt.setString(1,member.getM_niname());
			pstmt.setString(1,member.getM_id());
			pstmt.setString(1,member.getM_pass());
			int row = pstmt.executeUpdate();
			return row;
			
		} finally {
			if (pstmt != null)
				pstmt.close();
			if (con != null)
				con.close();
		}
	}
	
	
	//delete from MEMBER where M_ID=?;
	public int remove(String m_id) throws Exception{
		Connection con = null;
		PreparedStatement pstmt = null;
		String Sql ="delete from MEMBER where M_ID=?";
		try {
			con = dataSource.getConnection();
			pstmt = con.prepareStatement(Sql);
			pstmt.setString(1, m_id);
			int row = pstmt.executeUpdate();
			return row;
			
			
			
		} finally {
			if (pstmt != null)
				pstmt.close();
			if (con != null)
				con.close();
		}
	}
	
	
	
	public int update(Member member) throws Exception {
		Connection con = null;
		PreparedStatement pstmt = null;
		String Sql = "UPDATE member set M_NINAME=?,M_PASS=?,M_PHONE =? WHERE M_ID = ?;";
		try {
			con = dataSource.getConnection();
			pstmt = con.prepareStatement(Sql);
			pstmt.setString(1,member.getM_niname());
			pstmt.setString(1,member.getM_pass());
			pstmt.setString(1,member.getM_phone());
			int rows = pstmt.executeUpdate();
			return rows;
		} finally {
			if (pstmt != null)
				pstmt.close();
			if (con != null)
				con.close();
		}
	}
	

	public Member findMember(String m_id) throws Exception {
		Member Member = null;
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String selectQuery = "	select m_no,m_niname,m_id,m_pass,m_phone member where = m_id = ?";
		try {
			con = dataSource.getConnection();
			pstmt = con.prepareStatement(selectQuery);
			pstmt.setString(1, m_id);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				Member = new Member(rs.getInt("m_no"),
						rs.getString("m_niname"), rs.getString("m_id"),
						rs.getString("m_pass"), rs.getString("m_phone"));
			}
		} finally {
			if (rs != null)
				rs.close();
			if (pstmt != null)
				pstmt.close();
			if (con != null)
				con.close();
		}
		return Member;
	}
	
	
	public ArrayList<Member> selectAll() throws Exception {
		ArrayList<Member> memberList = new ArrayList<Member>();
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String Sql = "select * from member";
		try {
			con = dataSource.getConnection();
			pstmt = con.prepareStatement(Sql);
			rs = pstmt.executeQuery();
	
			while (rs.next()) {
				memberList.add(new Member( rs.getInt("m_no"),rs.getString("m_niname"),rs.getString("m_id"),rs.getString("m_pass"),rs.getString("m_phone")));
			}
			
		}finally{
			/*
			 * 반드시실행하는블록
			 *   1. return전에 반드시실행 
			 *   2. 예외던지기전에 실행
			 */
			if(rs!=null)
				rs.close();
			if(pstmt!=null)
				pstmt.close();
			if(con!=null)
				con.close();
		}
		return memberList;
		
	}
	
	
	
	
	
	/*
	M_NO	NUMBER(10,0)	No		1	회원번호
	M_NINAME	VARCHAR2(50 BYTE)	No		2	회원닉네임
	M_ID	VARCHAR2(50 BYTE)	No		3	회원아이디
	M_PASS	VARCHAR2(50 BYTE)	No		4	회원비밀번호
	M_PHONE	VARCHAR2(30 BYTE)	Yes		5	회원전화번호
	 
	 */
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
